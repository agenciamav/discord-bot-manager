# Discord Bot Manager - Regras e Informações Importantes

## Ambiente de Produção (VPS)

### Docker Swarm
- O projeto roda em um ambiente Docker Swarm
- Nome do serviço: `agenciamav_discord-bot-manager`
- Comunicação interna via rede Docker Swarm

### Variáveis de Ambiente
- `APP_URL`: Deve apontar para o serviço interno do Docker Swarm (`http://agenciamav-app`)
  - NÃO incluir `/api` no APP_URL pois o código já adiciona este prefixo
- `NODE_ENV`: Deve ser `production` em produção
- `DEBUG`: Use `axios:*` para debug de requisições
- `BOT_MANAGER_SECRET`: Chave secreta para autenticação

### Lições Aprendidas
1. A comunicação entre serviços deve usar os nomes internos do Docker Swarm
2. Evitar duplicação de paths na URL da API (`/api`)
3. O serviço da API usa nginx como reverse proxy
4. Importante verificar logs do serviço após alterações

### Comandos Úteis
```bash
# Visualizar logs do serviço
docker service logs --since 30s agenciamav_discord-bot-manager

# Atualizar variáveis de ambiente
docker service update --env-add KEY=VALUE agenciamav_discord-bot-manager

# Testar conectividade com API
docker exec $(docker ps -q -f name=discord-bot-manager) curl -v http://agenciamav-app/api/discord/bots
```

## Estrutura do Projeto
- `index.js`: Ponto de entrada da aplicação
- `botManager.js`: Gerenciamento de instâncias de bots
- `bot.js`: Classe base para bots Discord
- `events/`: Handlers de eventos Discord
- `commands/`: Comandos slash do Discord

## Convenções de Código
- Arquivos em camelCase
- Indentação: 4 espaços
- Código em inglês
- Comentários em inglês
- Organização por funcionalidade 